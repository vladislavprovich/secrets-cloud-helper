// Code generated by MockGen. DO NOT EDIT.
// Source: go-secretshelper/pkg/core (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	core "go-secretshelper/pkg/core"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockUseCase) Process(arg0 context.Context, arg1 core.Factory, arg2 *core.Defaults, arg3 *core.Vaults, arg4 *core.Secrets, arg5 *core.Transformations, arg6 *core.Sinks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockUseCaseMockRecorder) Process(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockUseCase)(nil).Process), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// RetrieveSecret mocks base method.
func (m *MockUseCase) RetrieveSecret(arg0 context.Context, arg1 core.Factory, arg2 *core.Defaults, arg3 core.Repository, arg4 *core.Vault, arg5 *core.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveSecret", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetrieveSecret indicates an expected call of RetrieveSecret.
func (mr *MockUseCaseMockRecorder) RetrieveSecret(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSecret", reflect.TypeOf((*MockUseCase)(nil).RetrieveSecret), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Transform mocks base method.
func (m *MockUseCase) Transform(arg0 context.Context, arg1 core.Factory, arg2 *core.Defaults, arg3 core.Repository, arg4 *core.Secrets, arg5 *core.Transformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transform indicates an expected call of Transform.
func (mr *MockUseCaseMockRecorder) Transform(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockUseCase)(nil).Transform), arg0, arg1, arg2, arg3, arg4, arg5)
}

// WriteToSink mocks base method.
func (m *MockUseCase) WriteToSink(arg0 context.Context, arg1 core.Factory, arg2 *core.Defaults, arg3 core.Repository, arg4 *core.Sink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToSink", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToSink indicates an expected call of WriteToSink.
func (mr *MockUseCaseMockRecorder) WriteToSink(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToSink", reflect.TypeOf((*MockUseCase)(nil).WriteToSink), arg0, arg1, arg2, arg3, arg4)
}
